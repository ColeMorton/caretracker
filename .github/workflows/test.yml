name: Test & Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Validate lockfile synchronization
        run: |
          echo "🔍 Validating pnpm lockfile synchronization..."
          if ! pnpm install --frozen-lockfile --prefer-offline; then
            echo "❌ pnpm-lock.yaml is out of sync with package.json files!"
            echo "💡 This indicates that dependencies were changed without regenerating the lockfile."
            echo "🔧 To fix: run 'pnpm install' locally and commit the updated lockfile."
            exit 1
          fi
          echo "✅ Lockfile validation passed - all dependencies are synchronized"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm database:generate

      - name: Run ESLint
        run: pnpm lint
        continue-on-error: true  # Allow warnings/errors while we improve code quality

      - name: Run TypeScript check
        run: pnpm typecheck

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit
        timeout-minutes: 10

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit
          name: unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: caretracker_test
          POSTGRES_USER: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm database:generate

      - name: Run database migrations
        run: pnpm database:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/caretracker_test

      - name: Run integration tests
        run: pnpm test:integration
        timeout-minutes: 15
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/caretracker_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: integration
          name: integration-tests

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]  # Wait for other tests to complete

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: caretracker_test
          POSTGRES_USER: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Generate Prisma client
        run: pnpm database:generate

      - name: Run database migrations
        run: pnpm database:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/caretracker_test

      - name: Seed test data
        run: pnpm database:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/caretracker_test
          CI: true

      - name: Build applications
        run: pnpm build
        env:
          CI: true
          NODE_ENV: test

      - name: Run E2E tests
        run: pnpm test:e2e
        timeout-minutes: 20
        env:
          # Database and Cache
          DATABASE_URL: postgresql://test:test@localhost:5432/caretracker_test
          REDIS_URL: redis://localhost:6379
          # Application Environment
          NODE_ENV: test
          CI: true
          # API Configuration
          JWT_SECRET: ci-test-secret-key-for-testing-only
          PORT: 4000
          HOST: 0.0.0.0
          LOG_LEVEL: info
          # Web App Configuration
          NEXT_PUBLIC_API_URL: http://localhost:4000
          # Development Environment Fallbacks
          WEB_PORT: 3000
          MOBILE_WEB_PORT: 3001
          ADMIN_PORT: 3002

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm database:generate

      - name: Build all packages
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 7